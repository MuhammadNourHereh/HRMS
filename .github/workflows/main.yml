name: Build and Deploy

on:
  push:
    branches:
      - staging
      - release

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Set up Node.js (adjust version as needed)
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      # Install dependencies for React app
      - name: Install dependencies
        run: |
          cd hr-client
          npm install

      # Build React app
      - name: Build React app
        run: |
          cd hr-client
          npm run build

      # Build the project from the main branch
      - name: Build Project from main branch
        run: |
          git fetch origin main
          git checkout main
          cd hr-client
          npm run build

      # Deploy to Staging or Release Server based on the branch
      - name: Deploy to Server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          STAGING_SERVER_IP: ${{ secrets.STAGING_SERVER_IP }}
          RELEASE_SERVER_IP: ${{ secrets.RELEASE_SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          # Set up SSH
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Write SSH private key with strict permissions
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Determine target server based on branch
          TARGET_SERVER_IP=""
          if [[ "${GITHUB_REF}" == "refs/heads/staging" ]]; then
            TARGET_SERVER_IP="${STAGING_SERVER_IP}"
          elif [[ "${GITHUB_REF}" == "refs/heads/release" ]]; then
            TARGET_SERVER_IP="${RELEASE_SERVER_IP}"
          else
            echo "Error: Unsupported branch for deployment"
            exit 1
          fi
          
          # Validate server IP is not empty
          if [ -z "$TARGET_SERVER_IP" ]; then
            echo "Error: Target server IP is not set"
            exit 1
          fi
          
          # Add SSH hosts to known_hosts
          ssh-keyscan -H "$TARGET_SERVER_IP" >> ~/.ssh/known_hosts
          
          # Verbose SSH connection test with error handling
          if ! ssh -vv -o StrictHostKeyChecking=no "$SERVER_USER@$TARGET_SERVER_IP" "whoami"; then
            echo "SSH connection test failed"
            exit 1
          fi
          
          # Set deployment path
          TARGET_SERVER_PATH="/var/www/html/HRMS/hr-client/"
          
          # Create deployment directory
          ssh "$SERVER_USER@$TARGET_SERVER_IP" "mkdir -p $TARGET_SERVER_PATH"
          
          # Deploy build files with verbose output
          echo "Deploying to $TARGET_SERVER_IP:$TARGET_SERVER_PATH"
          if ! scp -vv -r hr-client/dist/* "$SERVER_USER@$TARGET_SERVER_IP:$TARGET_SERVER_PATH"; then
            echo "Deployment failed"
            exit 1
          fi
          
          echo "Deployment completed successfully"
